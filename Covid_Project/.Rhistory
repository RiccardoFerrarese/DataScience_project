group_continent <- continent_df %>%
group_by( date, Continent_Name ) %>%
summarise(
cases = sum( cases )
) %>%
ungroup()
p <- ggplot( group_continent, aes( x = date, y = cases, group = Continent_Name, color = Continent_Name)) +
geom_line( alpha = 0.3 ) +
theme_minimal()  +
guides(color=guide_legend("Continenti"))
fig <- ggplotly(p)
fig
ggplot( group_continent, aes( x = date, y = cases, group = Continent_Name, color = Continent_Name)) +
geom_line( alpha = 2 ) +
facet_wrap(~Continent_Name)+
theme_minimal()
## ragruppo America del nord e del sud
america_data <- group_continent %>%
filter( Continent_Name == "North America" | Continent_Name == "South America") %>%
group_by( date ) %>%
summarise(
cases = sum(cases)
)
america_data$date <- as.numeric(america_data$date)
cor( america_data$date, america_data$cases)
mod1 <- lm( cases ~ date, data = america_data)
#summary(mod1)
mod1$coefficients
ggplot(america_data, aes(date,cases)) +
geom_line() +
geom_abline(intercept = mod1$coefficients[1],
slope = mod1$coefficients[2],
color = "blue") +
theme_minimal() +
theme( axis.title.x =  element_blank(),
axis.text.x = element_blank())+
labs( title = "Americhe")
## per l'Europa
europe_data <- group_continent %>%
filter( Continent_Name == "Europe") %>%
group_by( date ) %>%
summarise(
cases = sum(cases)
)
europe_data$date <- as.numeric(europe_data$date)
cor( america_data$date, america_data$cases)
mod2 <- lm( cases ~ date, data = europe_data)
#summary(mod2)
mod2$coefficients
ggplot(europe_data, aes(date,cases)) +
geom_line() +
geom_abline(intercept = mod2$coefficients[1],
slope = mod2$coefficients[2],
color = "red") +
theme_minimal() +
theme( axis.title.x =  element_blank(),
axis.text.x = element_blank()) +
labs( title = "Europe") +
ylim ( 0, max(america_data$cases) / 100 * 110 ) ## per metterlo a confronto con l'america
remove( america_data )
remove( europe_data )
## delete data from env.
remove( global_df_correct )
remove( info_continents )
remove( group_continent )
remove( continent )
remove( continent_df )
remove( continent_list_df )
remove( t_continent )
data_ita_init <- read.csv("GitRepoIta/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv" )
data_ita_init$data = substring( data_ita_init$data, 1, 10)
data_ita_tidy <- data_ita_init %>%
select( -stato, -casi_testati, -note ) %>%
mutate( data = ymd(data))
remove( data_ita_init )
ita_date <- data_ita_tidy %>%
group_by( data ) %>%
summarise(
totPos = sum( totale_positivi ),
newPos = sum( nuovi_positivi ),
deceduti = sum(deceduti),
tamponi = sum( tamponi )
)
## mi devo calcolare i tamponi giornalieri
ggplot( data = ita_date ) +
geom_line( mapping = aes( x = data, y = totPos), size = 0.5 ) +
theme_minimal() +
theme( axis.text.x = element_text(angle = 60, hjust = 1 ))
ggplot( data = ita_date, aes( x = data, y = newPos) ) +
geom_line( size = 0.5) +
theme_minimal()+
theme( axis.text.x = element_text(angle = 70, hjust = 1 ))
## dobbiamo calcolare il numero di tamponi per giorno ( abbiamo un il dato di tamponi totali fino a una certa data )
## lag per cercare il valore precedente a quello che sto valutando
ita_date <- ita_date %>%
arrange( data ) %>%
mutate( diff_tamponi = tamponi - lag(tamponi, default = first(0))) %>%
mutate( perc_tamponi_casi = (newPos/diff_tamponi) *100 )
ita_data_tamponi <- ita_date %>%
select( data, newPos, diff_tamponi, perc_tamponi_casi ) %>%
gather( key = "type", value = "n", newPos,  perc_tamponi_casi)
ggplot( ita_date , aes( x = data, y = newPos, size = tamponi )) +
geom_point( alpha = 0.5 ) +
ylab( "nuovi positivi") +
guides( size = guide_legend("nÂ° tamponi") )
ggplot( ita_date , aes( x = data, y = newPos, size = perc_tamponi_casi )) +
geom_point( alpha = 0.5 ) +
ylab( "nuovi positivi") +
guides( size = guide_legend("% casi/tamponi ") )
data_regioni_ita_init <- read.csv("GitRepoIta/dati-regioni/dpc-covid19-ita-regioni.csv")
data_regioni_ita_init$data = substring( data_regioni_ita_init$data, 1, 10)
names(data_regioni_ita_init)[names(data_regioni_ita_init)=="denominazione_regione"] <- "regione"
data_regIta_tidy <- data_regioni_ita_init %>%
select( -stato, -codice_regione, -lat, -long, -casi_testati, -note ) %>%
mutate( data = ymd(data))
## ASSICURIAMOCI CHE CI SIA UN DATO DI REGIONE PER DATA
data_regIta <- data_regIta_tidy %>%
group_by(data, regione ) %>%
summarise(
new_pos = sum(nuovi_positivi),
tamponi = sum( tamponi ),
terapia_intensiva = sum( terapia_intensiva )
) %>%
select( data, regione, new_pos, tamponi, terapia_intensiva)
remove( data_regioni_ita_init )
remove( data_regIta_tidy )
## vediamo se i tamponi sono totali o per giorno
tamponi_tot_reg <- ggplot( data_regIta, aes( x = data, y = tamponi, group = regione, color = regione )) +
geom_line()
#tamponi_tot_reg
## calcolo i tamponi per giorno
data_regIta <- data_regIta %>%
group_by( regione ) %>%
arrange( data ) %>%
mutate( diff_tamponi = tamponi - lag(tamponi, default = first(0))) %>%
mutate( perc_tamponi_casi = if(diff_tamponi != 0 ){
(new_pos/diff_tamponi) *100
} else { 0 }
)
plot1 <- ggplot( data_regIta, aes( x = data, y = diff_tamponi, group = regione, color = regione)) +
geom_line() +
facet_wrap( ~regione )  +
theme_minimal() +
theme(legend.position="none",
axis.text.x = element_text(angle = 70, hjust = 1 ),
axis.text.y = element_blank() ) +
ylab( "tamponi giornalieri")
plot <- ggplot( data_regIta, aes( x = data, y = new_pos, group = regione, color = regione)) +
geom_line() +
facet_wrap( ~regione )  +
theme_minimal() +
theme(legend.position="none",
axis.text.x = element_text(angle = 70, hjust = 1 ),
axis.text.y = element_blank() ) +
ylab( "postivi giornalieri")
plot1 +
geom_point() +
transition_reveal(data) +
ease_aes("linear") +
labs(title='Day: {frame_along}')
plot +
geom_point() +
transition_reveal(data) +
ease_aes("linear") +
labs(title='Day: {frame_along}')
data_regIta_noLomb <- filter(data_regIta, regione != "Lombardia")
plot2 <- ggplot( data_regIta_noLomb, aes( x = data, y = diff_tamponi, group = regione, color = regione)) +
geom_line() +
facet_wrap( ~regione )  +
theme_minimal() +
theme(legend.position="none",
axis.text.x = element_text(angle = 70, hjust = 1 ),
axis.text.y = element_blank() ) +
ylab( "tamponi giornalieri") +
labs( title = element_text("Tamponi giornalieri"))
plot3 <- ggplot( data_regIta_noLomb, aes( x = data, y = new_pos, group = regione, color = regione)) +
geom_line() +
facet_wrap( ~regione )  +
theme_minimal() +
theme(legend.position="none",
axis.text.x = element_text(angle = 70, hjust = 1 ),
axis.text.y = element_blank() ) +
ylab( "tamponi giornalieri") +
labs( title = element_text("Positivi giornalieri"))
plot2 +
geom_point() +
transition_reveal(data) +
ease_aes("linear") +
labs(title='Day: {frame_along}')
plot3 +
geom_point() +
transition_reveal(data) +
ease_aes("linear") +
labs(title='Day: {frame_along}')
plot <- ggplot(data_regIta, aes(new_pos, data, size = terapia_intensiva , colour = regione)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~regione) +
# Here comes the gganimate specific bits
labs(title = 'Data: {frame_time}', x = 'numero positivi giornalieri', y = 'data') +
transition_time(data) +
ease_aes('linear') +
shadow_wake(0.15, wrap = FALSE)
## ad animate function for error ' The animation object does not specify a save_animation method '
animate(plot, duration = 8, fps = 10, width = 900, height = 600, renderer = gifski_renderer())
#anim_save("reg_terapia.gif")
# movimento verticale mostra il proggredire del tempo
# quello orizzontale il numero di casi al giorno
regione <- c("Lombardia", "Lazio", "Campani", "Sicili", "Veneto", "Emilia-Romagna", "Piemonte", "Puglia", "Toscana", "Calabria", "Sardegna", "Liguria", "Marche", "Abruzzo", "Friuli Venezia Giulia", "Trentino-Alto Adige", "Umbria", "Basilicata", "Molise", "Valle d'Aosta" )
popolazione <- c(1060574, 5879082, 5801692, 4999891, 4905854, 4459477, 4356406, 4029053, 3729641, 1947131, 1639591, 1550640, 1525271, 1311580, 1215220, 1072276, 882015, 562869, 305617, 125666)
densita <- c(422, 341, 424, 194, 267, 199, 172, 206, 162, 128, 68, 286, 162, 121, 153, 79, 104, 56, 69, 39)
superficie <- c(23863.65, 17232.29, 13670.95, 25832.39, 18345.35, 22452.78, 25387.07, 19540.90, 22987.04 , 15221.90 , 24100.02 ,  5416.21 , 9401.38 , 10831.84 , 7924.36 , 13605.50 , 8464.33 , 10073.32 , 4460.65 , 3260.90)
info_regioni <- data.frame(regione=regione, popolazione=popolazione, superficie=superficie, densita=densita)
pos_regione <- data_regIta %>%
group_by( regione ) %>%
summarise(
cases = sum( new_pos)
)
t_regioni <- inner_join( pos_regione, info_regioni )
names(t_regioni)[names(t_regioni)=="regione"] <- "group"
compute_and_visualize_prevalence( t_regioni )
names(t_regioni)[names(t_regioni)=="group"] <- "regione"
data_regIta %>%
group_by( regione) %>%
summarise(
tot_tamp_reg = sum( diff_tamponi )
) %>%
arrange( -tot_tamp_reg )
knitr::include_graphics("./Image/reg_marzo.jpg")
knitr::include_graphics("./Image/reg_aprile.jpg")
data_regIta %>%
group_by( regione) %>%
summarise(
tot_intensiva_reg = sum( terapia_intensiva )
) %>%
arrange( -tot_intensiva_reg )
data_prov_ita_init <- read.csv("GitRepoIta/dati-province/dpc-covid19-ita-province.csv")
data_prov_ita_init$data = substring( data_prov_ita_init$data, 1, 10)
names(data_prov_ita_init)[names(data_prov_ita_init)=="denominazione_regione"] <- "regione"
names(data_prov_ita_init)[names(data_prov_ita_init)=="denominazione_provincia"] <- "provincia"
data_prov_tidy <- data_prov_ita_init %>%
select( - stato, -codice_regione, -codice_provincia, -sigla_provincia, -lat, -long, -note ) %>%
mutate(provincia = stringr::str_replace(provincia, "In fase di definizione/aggiornamento", "Other"	))%>%
mutate(provincia = stringr::str_replace(provincia, "In fase di definizione", "Other"	))%>%
mutate(provincia = stringr::str_replace(provincia, "Fuori Regione / Provincia Autonoma", "Other"	))%>%
mutate( data = ymd(data))
remove( data_prov_ita_init)
## per vedere le provincie con maggiorn numero di casi
data_prov_tidy %>%
group_by( regione, provincia ) %>%
summarise(
tot_cases = sum(totale_casi)
) %>%
arrange( -tot_cases)
data_prov <- data_prov_tidy %>%
filter( regione == "Lombardia" | regione == "Veneto" | regione == "Emilia-Romagna" | regione == "Piemonte" | regione == "Friuli Venezia Giulia" | regione == "Toscana")
tot_case_prov  <-  data_prov %>%
group_by(regione, provincia ) %>%
summarise(
tot_cases = sum(totale_casi)
)
data_prov_tidy %>%
group_by(regione, provincia ) %>%
summarise(
tot_cases = sum(totale_casi)
) %>%
arrange( -tot_cases)
tot_case_prov %>%
filter( regione == "Lombardia" ) %>%
arrange(-tot_cases)
tot_case_prov %>%
filter( regione == "Lombardia" ) %>%
ggplot( aes( y = tot_cases, x = provincia, fill = provincia )) +
geom_bar( stat = "identity" ) +
coord_polar( theta = "x", direction = 1) +
labs( title = "Lombardia" ) +
ylab("casi totali") +
theme_minimal()
knitr::include_graphics("./Image/Map_regioni/lombardia.jpg")
tot_case_prov %>%
filter( regione == "Veneto" ) %>%
arrange(-tot_cases)
tot_case_prov %>%
filter( regione == "Veneto" ) %>%
ggplot( aes( y = tot_cases, x = provincia, fill = provincia )) +
geom_bar( stat = "identity" ) +
coord_polar( theta = "x", direction = 1) +
labs( title = "Veneto" ) +
ylab("casi totali") +
theme_minimal()
knitr::include_graphics("./Image/Map_regioni/veneto.jpg")
tot_case_prov %>%
filter( regione == "Emilia-Romagna" ) %>%
arrange(-tot_cases)
tot_case_prov %>%
filter( regione == "Emilia-Romagna" ) %>%
ggplot( aes( y = tot_cases, x = provincia, fill = provincia )) +
geom_bar( stat = "identity" ) +
coord_polar( theta = "x", direction = 1) +
labs( title = "Emilia-Romagna" ) +
ylab("casi totali") +
theme_minimal()
knitr::include_graphics("./Image/Map_regioni/emilia.jpg")
tot_case_prov %>%
filter( regione == "Piemonte" ) %>%
arrange(-tot_cases)
tot_case_prov %>%
filter( regione == "Piemonte" ) %>%
ggplot( aes( y = tot_cases, x = provincia, fill = provincia )) +
geom_bar( stat = "identity" ) +
coord_polar( theta = "x", direction = 1) +
labs( title = "Piemonte" ) +
ylab("casi totali") +
theme_minimal()
knitr::include_graphics("./Image/Map_regioni/piemonte.jpg")
tot_case_prov %>%
filter( regione == "Toscana" ) %>%
ggplot( aes( y = tot_cases, x = provincia, fill = provincia )) +
geom_bar( stat = "identity" ) +
coord_polar( theta = "x", direction = 1) +
labs( title = "Toscana" ) +
ylab("casi totali") +
theme_minimal()
## Prendiamo come caso il friuli avendo poche provincie
tot_case_prov %>%
filter( regione == "Friuli Venezia Giulia" ) %>%
ggplot( aes( y = tot_cases, x = provincia, fill = provincia )) +
geom_bar( stat = "identity" ) +
coord_polar( theta = "x", direction = 1) +
ylab("casi totali") +
labs( title = "Friuli Venezia Giulia" ) +
theme_minimal()
## possiamo notare come il lockdown che non ha permesso alle persone di spostarsi dal proprio comune ha avuto un
## risultato molto positivo, essendo che all'interno di una regione non c'Ã¨ stato uno sviluppo uniforme della pandemia
## probabilmente per questo risultato si Ã¨ deciso con un decreto successivo si Ã¨ deciso di concedere la libera circolazione all'interno
## della propria regione
knitr::include_graphics("./Image/province1.jpg")
knitr::include_graphics("./Image/aeroporti_nord.jpg")
global_df_init <- read.csv("GitRepoData/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv" )
global_df_date = global_df_init %>%
gather(X1.22.20:X7.1.20, key ="date", value = "cases") %>%  ## remember to update final date
select( -Lat, -Long )
global_df_init
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE, echo = FALSE, fig.align='center' )
getwd()
## TODO FOR RUN IN YOUR PC
##setwd()
## data analisys
library(dplyr)
library(tidyverse)
library(lubridate)
## plotting
library(ggplot2)
library(ggExtra)
library(gganimate)
library(plotly)
library(reshape2)
library(gifski)
global_df_init <- read.csv("GitRepoData/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv" )
head(global_df_init )
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE, echo = FALSE, fig.align='center' )
getwd()
## TODO FOR RUN IN YOUR PC
##setwd()
## data analisys
library(dplyr)
library(tidyverse)
library(lubridate)
## plotting
library(ggplot2)
library(ggExtra)
library(gganimate)
library(plotly)
library(reshape2)
library(gifski)
global_df_init <- read.csv("GitRepoData/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv" )
head(global_df_init )
global_df_date = global_df_init %>%
gather(X1.22.20:X7.1.20, key ="date", value = "cases") %>%  ## remember to update final date
select( -Lat, -Long )
remove( global_df_init )
global_df_date$date = substring( global_df_date$date, 2)
names(global_df_date)[names(global_df_date)=="Country.Region"] <- "country"
global_df_date = global_df_date %>%
mutate( date = mdy(date) ) %>%
group_by( country, date ) %>%  ## avendo country duplicati
summarise(
cases = sum( cases )
) %>%
ungroup() # per utilizzare plotly
## calcolo valori per data
global_data = global_df_date %>%
group_by(  date ) %>%
summarise(
cases = sum( cases )
)
# per il plot non consideriamo paesi con meno di 10_000 casi
global_filter = global_df_date %>%
filter( cases > 20000 )
global_filter_noUs_Brazil <- global_filter %>%
filter( country != "US" & country != "Brazil")
global_df_init
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE, echo = FALSE, fig.align='center' )
getwd()
## TODO FOR RUN IN YOUR PC
##setwd()
## data analisys
library(dplyr)
library(tidyverse)
library(lubridate)
## plotting
library(ggplot2)
library(ggExtra)
library(gganimate)
library(plotly)
library(reshape2)
library(gifski)
global_df_init <- read.csv("GitRepoData/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv" )
head(global_df_init )
global_df_date = global_df_init %>%
gather(X1.22.20:X7.1.20, key ="date", value = "cases") %>%  ## remember to update final date
select( -Lat, -Long )
global_df_date$date = substring( global_df_date$date, 2)
names(global_df_date)[names(global_df_date)=="Country.Region"] <- "country"
global_df_date = global_df_date %>%
mutate( date = mdy(date) ) %>%
group_by( country, date ) %>%  ## avendo country duplicati
summarise(
cases = sum( cases )
) %>%
ungroup() # per utilizzare plotly
## calcolo valori per data
global_data = global_df_date %>%
group_by(  date ) %>%
summarise(
cases = sum( cases )
)
# per il plot non consideriamo paesi con meno di 10_000 casi
global_filter = global_df_date %>%
filter( cases > 20000 )
global_filter_noUs_Brazil <- global_filter %>%
filter( country != "US" & country != "Brazil")
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE, echo = FALSE, fig.align='center' )
getwd()
## TODO FOR RUN IN YOUR PC
##setwd()
## data analisys
library(dplyr)
library(tidyverse)
library(lubridate)
## plotting
library(ggplot2)
library(ggExtra)
library(gganimate)
library(plotly)
library(reshape2)
library(gifski)
global_df_init <- read.csv("GitRepoData/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv" )
head(global_df_init )
global_df_date = global_df_init %>%
gather(X1.22.20:X7.1.20, key ="date", value = "cases") %>%  ## remember to update final date
select( -Lat, -Long )
global_df_date$date = substring( global_df_date$date, 2)
names(global_df_date)[names(global_df_date)=="Country.Region"] <- "country"
global_df_date = global_df_date %>%
mutate( date = mdy(date) ) %>%
group_by( country, date ) %>%  ## avendo country duplicati
summarise(
cases = sum( cases )
) %>%
ungroup() # per utilizzare plotly
## calcolo valori per data
global_data = global_df_date %>%
group_by(  date ) %>%
summarise(
cases = sum( cases )
)
# per il plot non consideriamo paesi con meno di 10_000 casi
global_filter = global_df_date %>%
filter( cases > 20000 )
global_filter_noUs_Brazil <- global_filter %>%
filter( country != "US" & country != "Brazil")
global_df_init <- read.csv("GitRepoData/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv" )
head(global_df_init )
global_df_init <- read.csv("GitRepoData/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv" )
head(global_df_init )
View(global_df_init)
View(global_df_init)
global_df_date = global_df_init %>%
gather(X1.22.20:X7.1.20, key ="date", value = "cases") %>%  ## remember to update final date
select( -Lat, -Long )
global_df_date$date = substring( global_df_date$date, 2)
names(global_df_date)[names(global_df_date)=="Country.Region"] <- "country"
global_df_date = global_df_date %>%
mutate( date = mdy(date) ) %>%
group_by( country, date ) %>%  ## avendo country duplicati
summarise(
cases = sum( cases )
) %>%
ungroup() # per utilizzare plotly
## calcolo valori per data
global_data = global_df_date %>%
group_by(  date ) %>%
summarise(
cases = sum( cases )
)
# per il plot non consideriamo paesi con meno di 10_000 casi
global_filter = global_df_date %>%
filter( cases > 20000 )
global_filter_noUs_Brazil <- global_filter %>%
filter( country != "US" & country != "Brazil")
